{
	"name": "DF_websitestagedb_se_factsheet_log_edw_stage",
	"properties": {
		"folder": {
			"name": "SALES/EDW_Web/PPL_websitestagedb_edw_web_load_3"
		},
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "DS_Generic_Blob_edwsaleslanding_DelimitedText",
						"type": "DatasetReference"
					},
					"name": "SQfactsheetlog"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "DS_Generic_Blob_edwsaleslanding_DelimitedText",
						"type": "DatasetReference"
					},
					"name": "ErrorRecords"
				},
				{
					"dataset": {
						"referenceName": "DS_Generic_Snowflake",
						"type": "DatasetReference"
					},
					"name": "TGTkmxcomfactsheetlogstage"
				}
			],
			"transformations": [
				{
					"name": "EXPsefactsheetlog"
				},
				{
					"name": "Assert"
				},
				{
					"name": "TGTkmxcomfactsheetlogstageAssertConditionalSplitComponent"
				},
				{
					"name": "select1"
				},
				{
					"name": "flowlet1",
					"flowlet": {
						"referenceName": "FLW_Generic_Duplicate_Reject",
						"type": "DataFlowReference",
						"parameters": {
							"SortBy": "$Sort_Key",
							"Checksum_DupKeyColsExpr": "$Checksum_Key"
						}
					}
				},
				{
					"name": "MapDrifted1",
					"description": "Creates an explicit mapping for each drifted column"
				},
				{
					"name": "NULLIFS"
				}
			],
			"script": "parameters{\n\tErrorFile as string,\n\tSessionStartTime as string,\n\tSort_Key as string,\n\tChecksum_Key as string\n}\nsource(output(\n\t\tsearch_id as string,\n\t\tvisitor_id as string,\n\t\tsession_id as string,\n\t\tstock_num as integer,\n\t\tis_transferable as string,\n\t\tis_exact_match as string,\n\t\tvehicle_loc_num as integer,\n\t\tvehicle_market_num as integer,\n\t\tad_code as string,\n\t\tmanager_special_id as integer,\n\t\tweb_site as string,\n\t\tinsert_ts as timestamp,\n\t\tip_address as string,\n\t\tphoto_count as integer\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tmultiLineRow: true) ~> SQfactsheetlog\nSQfactsheetlog derive(search_id = rtrim(substring(toString(search_id), toInteger(1), 50)),\n\t\tvisitor_id = rtrim(substring(toString(visitor_id), toInteger(1), 50)),\n\t\tsession_id = rtrim(substring(toString(session_id), toInteger(1), 50)),\n\t\tstock_num = toInteger(stock_num),\n\t\tstep_id = toInteger(0),\n\t\tis_transferable = rtrim(substring(toString(is_transferable), toInteger(1), 1)),\n\t\tis_exact_match = rtrim(substring(toString(is_exact_match), toInteger(1), 1)),\n\t\tvehicle_loc_num = toInteger(vehicle_loc_num),\n\t\tvehicle_market_num = toInteger(vehicle_market_num),\n\t\tad_code = rtrim(substring(toString(ad_code), toInteger(1), 50)),\n\t\tmanager_special_id = toInteger(manager_special_id),\n\t\tweb_site = rtrim(substring(toString(web_site), toInteger(1), 1)),\n\t\tphoto_count = toInteger(photo_count),\n\t\tip_address = rtrim(substring(toString(ip_address), toInteger(1), 15)),\n\t\tINSERT_TS = toTimestamp($SessionStartTime),\n\t\tLST_UPD_TS = toTimestamp($SessionStartTime),\n\t\tSS_INSERT_TS = insert_ts,\n\t\tSS_INSERT_DT = insert_ts,\n\t\tdefault_date = toDate(toString(insert_ts, 'yyyy-mm-dd'),'yyyy-mm-dd')) ~> EXPsefactsheetlog\nNULLIFS assert(expectTrue(!(isNull(INSERT_TS) || isNull(LST_UPD_TS)), false, 'rule1nullcheck')) ~> Assert\nAssert split(isError(),\n\tdisjoint: true) ~> TGTkmxcomfactsheetlogstageAssertConditionalSplitComponent@(ErrorRows, CleanRows)\nMapDrifted1 select(mapColumn(\n\t\tSEARCH_ID = search_id,\n\t\tVISITOR_ID = visitor_id,\n\t\tSESSION_ID = session_id,\n\t\tSTOCK_NUM = stock_num,\n\t\tSTEP_ID = step_id,\n\t\tIS_TRANSFERABLE = is_transferable,\n\t\tIS_EXACT_MATCH = is_exact_match,\n\t\tVEHICLE_LOC_NUM = vehicle_loc_num,\n\t\tVEHICLE_MARKET_NUM = vehicle_market_num,\n\t\tAD_CODE = ad_code,\n\t\tMANAGER_SPECIAL_ID = manager_special_id,\n\t\tWEB_SITE = web_site,\n\t\tPHOTO_COUNT = photo_count,\n\t\tSS_INSERT_TS,\n\t\tSS_INSERT_DT,\n\t\tIP_ADDRESS = ip_address,\n\t\tINSERT_TS,\n\t\tLST_UPD_TS\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> select1\nEXPsefactsheetlog compose(mapParameter(\n\t\tSortBy = $Sort_Key,\n\t\tChecksum_DupKeyColsExpr = $Checksum_Key\n\t),\n\tcomposition: 'FLW_Generic_Duplicate_Reject') ~> flowlet1@(DuplicateRecords)\nflowlet1@DuplicateRecords derive(stock_num = toInteger(byName('stock_num')),\n\t\tad_code = toString(byName('ad_code')),\n\t\tstep_id = toInteger(byName('step_id')),\n\t\tsession_id = toString(byName('session_id')),\n\t\tSS_INSERT_TS = toTimestamp(byName('SS_INSERT_TS')),\n\t\tweb_site = toString(byName('web_site')),\n\t\tvehicle_loc_num = toInteger(byName('vehicle_loc_num')),\n\t\tvisitor_id = toString(byName('visitor_id')),\n\t\tINSERT_TS = toTimestamp(byName('INSERT_TS')),\n\t\tis_exact_match = toString(byName('is_exact_match')),\n\t\tphoto_count = toInteger(byName('photo_count')),\n\t\tsearch_id = toString(byName('search_id')),\n\t\tmanager_special_id = toInteger(byName('manager_special_id')),\n\t\tis_transferable = toString(byName('is_transferable')),\n\t\tLST_UPD_TS = toTimestamp(byName('LST_UPD_TS')),\n\t\tdefault_date = toDate(byName('default_date')),\n\t\tip_address = toString(byName('ip_address')),\n\t\tvehicle_market_num = toInteger(byName('vehicle_market_num')),\n\t\tSS_INSERT_DT = toDate(byName('SS_INSERT_DT'))) ~> MapDrifted1\nselect1 derive(SEARCH_ID = iif(SEARCH_ID==toString(''),toString(null()),SEARCH_ID),\n\t\tVISITOR_ID = iif(VISITOR_ID==toString(''),toString(null()),VISITOR_ID),\n\t\tSESSION_ID = iif(SESSION_ID==toString(''),toString(null()),SESSION_ID),\n\t\tIS_TRANSFERABLE = iif(IS_TRANSFERABLE==toString(''),toString(null()),IS_TRANSFERABLE),\n\t\tIS_EXACT_MATCH = iif(IS_EXACT_MATCH==toString(''),toString(null()),IS_EXACT_MATCH),\n\t\tAD_CODE = iif(AD_CODE==toString(''),toString(null()),AD_CODE),\n\t\tWEB_SITE = iif(WEB_SITE==toString(''),toString(null()),WEB_SITE),\n\t\tIP_ADDRESS = iif(IP_ADDRESS==toString(''),toString(null()),IP_ADDRESS)) ~> NULLIFS\nTGTkmxcomfactsheetlogstageAssertConditionalSplitComponent@ErrorRows sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tpartitionFileNames:[($ErrorFile)],\n\tumask: 0022,\n\tpreCommands: [],\n\tpostCommands: [],\n\tskipDuplicateMapOutputs: true,\n\tsaveOrder: 2,\n\tpartitionBy('hash', 1)) ~> ErrorRecords\nTGTkmxcomfactsheetlogstageAssertConditionalSplitComponent@CleanRows sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\tformat: 'table',\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tsaveOrder: 1,\n\tstageInsert: true) ~> TGTkmxcomfactsheetlogstage"
		}
	}
}